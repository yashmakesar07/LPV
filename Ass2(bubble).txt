#include<iostream>
#include<stdlib.h>
#include<omp.h>
using namespace std;

void bubble(int *, int);
void swap(int &, int &);


void bubble(int *a, int n)
{
    for(  int i = 0;  i < n;  i++ )
     {
   	 int first = i % 2;

   	 #pragma omp parallel for shared(a,first)
   	 for(  int j = first;  j < n-1;  j += 2  )
   	   {
   		 if(  a[ j ]  >  a[ j+1 ]  )
   		  {
     			 swap(  a[ j ],  a[ j+1 ]  );
   		  }
   		   }
     }
}


void swap(int &a, int &b)
{

    int test;
    test=a;
    a=b;
    b=test;

}

int main()
{

    int *a,n;
    cout<<"\n enter total no of elements=>";
    cin>>n;
    a=new int[n];
    cout<<"\n enter elements=>";
    for(int i=0;i<n;i++)
    {
   	 cin>>a[i];
    }

    bubble(a,n);

    cout<<"\n sorted array is=>";
    for(int i=0;i<n;i++)
    {
   	 cout<<a[i]<<endl;
    }


return 0;
}


/*This is the function parallel_bubble_sort() that implements the parallel bubble sort algorithm using OpenMP.
#pragma omp parallel is a directive that creates a team of threads to execute the parallel code inside the block. In this case, the block contains the code for bubble sort algorithm.
int i, temp, flag = 1; declares the variables i, temp, and flag that will be used inside the while loop.
while (flag) is a loop that runs until the flag variable is 0.
flag = 0; sets the flag variable to 0 before starting each iteration of the for loop.
#pragma omp for is a directive that parallelizes the for loop, by dividing the loop iterations among the threads in the team. Each thread performs the sorting operation on a subset of the array, thereby making the sorting process faster.
for (i = 0; i < n-1; i++) is a for loop that iterates over the array, from 0 to n-1.
if (arr[i] > arr[i+1]) checks if the current element is greater than the next element.
temp = arr[i]; arr[i] = arr[i+1]; arr[i+1] = temp; swaps the current element with the next element, using a temporary variable.
flag = 1; sets the flag variable to 1, indicating that a swap has been made.
Finally, the sorted array is printed using a for loop.
 */